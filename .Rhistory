theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=.4))+
labs(x="Employer", y="Total Contributed Amount")+
ggtitle("Donald Trump")
grid.arrange(plot5, plot6, ncol = 2, top = "Total Contributed Amount by Employer in WA")
val_by_zip_hillary <- hillary_clinton %>%
group_by(contbr_zip) %>%
summarise(value = sum(contb_receipt_amt)) %>%
arrange(desc(value))
val_by_zip_hillary$region = val_by_zip_hillary$contbr_zip
val_by_zip_hillary = na.omit(val_by_zip_hillary)
us <- getData("GADM", country="USA", level=1)
washington_zip_choro = ZipChoropleth$new(val_by_zip_hillary)
val_by_zip_hillary <- hillary_clinton %>%
group_by(contbr_zip) %>%
summarise(value = sum(contb_receipt_amt)) %>%
arrange(desc(value))
val_by_zip_hillary$region = val_by_zip_hillary$contbr_zip
val_by_zip_hillary = na.omit(val_by_zip_hillary)
setwd("~/Documents/udacity_data_analyst/p4")
require(ggplot2)
require(GGally)
require(rpart)
require(grid)
require(nnet)
require(randomForest)
require(scales)
require(memisc)
require(lattice)
require(dplyr)
require(gridExtra)
library(RColorBrewer)
library(choroplethr)
library(choroplethrMaps)
library(choroplethrZip)
library(maptools)
library(scales)
#Description of all variables:
# CMTE_ID           COMMITTEE ID                            S - skipped
# CAND_ID           CANDIDATE ID                            S - skipped
# CAND_NM           CANDIDATE NAME                          S - skipped
# CONTBR_NM         CONTRIBUTOR NAME                        S
# CONTBR_CITY       CONTRIBUTOR CITY                        S
# CONTBR_ST         CONTRIBUTOR STATE                       S
# CONTBR_ZIP        CONTRIBUTOR ZIP CODE                    S
# CONTBR_EMPLOYER   CONTRIBUTOR EMPLOYER                    S
# CONTBR_OCCUPATION CONTRIBUTOR OCCUPATION                  S
# CONTB_RECEIPT_AMT CONTRIBUTION RECEIPT AMOUNT             N
# CONTB_RECEIPT_DT  CONTRIBUTION RECEIPT DATE               D
# RECEIPT_DESC      RECEIPT DESCRIPTION                     S
# MEMO_CD           MEMO CODE                               S - skipped
# MEMO_TEXT         MEMO TEXT                               S
# FORM_TP           FORM TYPE                               S - skipped
# FILE_NUM          FILE NUMBER                             N - skipped
# TRAN_ID           TRANSACTION ID                          S - skipped
# ELECTION_TP       ELECTION TYPE/PRIMARY GENERAL INDICATOR S - skipped
# Load and clean up the Data
washington_original<- read.table("P00000001_WA.csv", sep = ',', header= TRUE, row.names = NULL)
colnames(washington_original) <- c(colnames(washington_original)[-1],"x")
washington_original$x <- NULL
washington <- subset(washington_original, washington_original$contb_receipt_amt>0 & washington_original$contb_receipt_amt<=2700)
# Fix zipcode format
washington$contbr_zip = strtrim(washington$contbr_zip, 5)
ncol(washington)
nrow(washington)
str(washington)
summary(washington)
ggplot(aes(x=washington$contb_receipt_amt), data=washington) +
geom_density()+
labs(x="Contributed Amount of Money")+
ggtitle("Density Plot of Contributed Amount from All Cities in WA")
less_2000 <- subset(washington, washington$contb_receipt_amt <2000)
more_2000 <- subset(washington, washington$contb_receipt_amt >=2000)
less_2000_df <- as.data.frame(table(less_2000$contbr_city))
more_2000_df <- as.data.frame(table(more_2000$contbr_city))
names(less_2000_df)[1] = 'City'
names(more_2000_df)[1] = 'City'
more_2000_df[which(more_2000_df$Freq == max(more_2000_df$Freq)),]
hillary_clinton <- subset(washington, washington$cand_id == "P00003392")
donald_trump <- subset(washington, washington$cand_id == "P80001571")
clinton_by_city <- hillary_clinton %>%
group_by(contbr_city) %>%
dplyr :: summarise(mean_amt=mean(contb_receipt_amt),
median_amt=median(contb_receipt_amt),
min_amt = min(contb_receipt_amt),
max_amt = max(contb_receipt_amt),
n = n()) %>%
arrange(desc(mean_amt))
trump_by_city <- donald_trump %>%
group_by(contbr_city) %>%
dplyr:: summarise(mean_amt=mean(contb_receipt_amt),
median_amt=median(contb_receipt_amt),
min_amt = min(contb_receipt_amt),
max_amt = max(contb_receipt_amt),
n = n()) %>%
arrange(desc(mean_amt))
plot1 <- ggplot(aes(mean_amt), data=clinton_by_city)+
ggtitle("Hillary Clinton")+
labs(x="Average Amount", y='Frequency')+
scale_x_continuous(limits = c(0,2700))+
scale_y_continuous(limits = c(0,300))+
theme_classic()+
geom_histogram()
plot2 <- ggplot(aes(mean_amt), data=trump_by_city)+
ggtitle("Donald_Trump")+
labs(x="Average Amount", y="Frequency")+
scale_x_continuous(limits = c(0,2700))+
scale_y_continuous(limits = c(0,300))+
theme_classic()+
geom_histogram()
grid.arrange(plot1, plot2, ncol = 2, top = textGrob("Average Contributed Amount by City", gp=gpar(fontsize=20, font=2)))
clinton_trump <- subset(washington, washington$cand_id == "P00003392" | washington$cand_id == "P80001571")
ggplot(aes(x=cand_nm, y=contb_receipt_amt), data=clinton_trump)+
geom_boxplot()+
coord_cartesian(ylim = c(0,500))+
theme_classic()+
ggtitle("Boxplots show the average contributed amount of money from all cities in WA")+
labs(x="Candidate Name", y="Contributed Amount")
hillary_by_employers <- hillary_clinton %>%
filter(contbr_employer != '',
contbr_employer != 'INFORMATION REQUESTED',
contbr_employer != 'N/A',
contbr_employer != 'RETIRED',
contbr_employer != 'NOT EMPLOYED') %>%
group_by(contbr_employer) %>%
tally(contb_receipt_amt) %>%
arrange(desc(n))%>%
top_n(10)
donald_by_employers <- donald_trump %>%
filter(contbr_employer != '',
contbr_employer != 'INFORMATION REQUESTED',
contbr_employer != 'N/A',
contbr_employer != 'RETIRED',
contbr_employer != 'NOT EMPLOYED') %>%
group_by(contbr_employer) %>%
tally(contb_receipt_amt) %>%
arrange(desc(n))%>%
top_n(10)
#Plot top 10 employers by total value
plot3 <- ggplot(aes(x=contbr_employer, y=n), data=hillary_by_employers)+
geom_bar(stat='identity')+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=.4))+
labs(x="Employer", y="Total Contributed Amount")+
ggtitle("Hillary Clinton")
plot4 <- ggplot(aes(x=contbr_employer, y=n), data=donald_by_employers)+
geom_bar(stat='identity')+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=.4))+
labs(x="Employer", y="Total Contributed Amount")+
ggtitle("Donald Trump")
grid.arrange(plot3, plot4, ncol = 2, top = "Total Contributed Amount by Employer in WA")
hillary_by_employers_noself <- hillary_by_employers %>%
filter(contbr_employer != 'SELF-EMPLOYED')%>%
group_by(contbr_employer) %>%
arrange(desc(n))%>%
top_n(10)
donald_by_employers_noself <- donald_by_employers %>%
filter(contbr_employer != 'SELF-EMPLOYED') %>%
group_by(contbr_employer) %>%
arrange(desc(n))%>%
top_n(10)
#Plot top 10 employers by total value without self-employed
plot5 <- ggplot(aes(x=contbr_employer, y=n), data=hillary_by_employers_noself)+
geom_bar(stat='identity')+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=.4))+
labs(x="Employer", y="Total Contributed Amount")+
ggtitle("Hillary Clinton")
plot6 <- ggplot(aes(x=contbr_employer, y=n), data=donald_by_employers_noself)+
geom_bar(stat='identity')+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=.4))+
labs(x="Employer", y="Total Contributed Amount")+
ggtitle("Donald Trump")
grid.arrange(plot5, plot6, ncol = 2, top = "Total Contributed Amount by Employer in WA")
val_by_zip_hillary <- hillary_clinton %>%
group_by(contbr_zip) %>%
summarise(value = sum(contb_receipt_amt)) %>%
arrange(desc(value))
val_by_zip_hillary$region = val_by_zip_hillary$contbr_zip
val_by_zip_hillary = na.omit(val_by_zip_hillary)
washington_zip_choro = ZipChoropleth$new(val_by_zip_hillary)
setwd("~/Documents/udacity_data_analyst/p4")
require(ggplot2)
require(GGally)
require(rpart)
require(grid)
require(nnet)
require(randomForest)
require(scales)
require(memisc)
require(lattice)
require(dplyr)
require(gridExtra)
library(RColorBrewer)
library(choroplethr)
library(choroplethrMaps)
library(choroplethrZip)
library(maptools)
library(scales)
#Description of all variables:
# CMTE_ID           COMMITTEE ID                            S - skipped
# CAND_ID           CANDIDATE ID                            S - skipped
# CAND_NM           CANDIDATE NAME                          S - skipped
# CONTBR_NM         CONTRIBUTOR NAME                        S
# CONTBR_CITY       CONTRIBUTOR CITY                        S
# CONTBR_ST         CONTRIBUTOR STATE                       S
# CONTBR_ZIP        CONTRIBUTOR ZIP CODE                    S
# CONTBR_EMPLOYER   CONTRIBUTOR EMPLOYER                    S
# CONTBR_OCCUPATION CONTRIBUTOR OCCUPATION                  S
# CONTB_RECEIPT_AMT CONTRIBUTION RECEIPT AMOUNT             N
# CONTB_RECEIPT_DT  CONTRIBUTION RECEIPT DATE               D
# RECEIPT_DESC      RECEIPT DESCRIPTION                     S
# MEMO_CD           MEMO CODE                               S - skipped
# MEMO_TEXT         MEMO TEXT                               S
# FORM_TP           FORM TYPE                               S - skipped
# FILE_NUM          FILE NUMBER                             N - skipped
# TRAN_ID           TRANSACTION ID                          S - skipped
# ELECTION_TP       ELECTION TYPE/PRIMARY GENERAL INDICATOR S - skipped
# Load and clean up the Data
washington_original<- read.table("P00000001_WA.csv", sep = ',', header= TRUE, row.names = NULL)
colnames(washington_original) <- c(colnames(washington_original)[-1],"x")
washington_original$x <- NULL
washington <- subset(washington_original, washington_original$contb_receipt_amt>0 & washington_original$contb_receipt_amt<=2700)
# Fix zipcode format
washington$contbr_zip = strtrim(washington$contbr_zip, 5)
ncol(washington)
nrow(washington)
str(washington)
summary(washington)
ggplot(aes(x=washington$contb_receipt_amt), data=washington) +
geom_density()+
labs(x="Contributed Amount of Money")+
ggtitle("Density Plot of Contributed Amount from All Cities in WA")
less_2000 <- subset(washington, washington$contb_receipt_amt <2000)
more_2000 <- subset(washington, washington$contb_receipt_amt >=2000)
less_2000_df <- as.data.frame(table(less_2000$contbr_city))
more_2000_df <- as.data.frame(table(more_2000$contbr_city))
names(less_2000_df)[1] = 'City'
names(more_2000_df)[1] = 'City'
more_2000_df[which(more_2000_df$Freq == max(more_2000_df$Freq)),]
hillary_clinton <- subset(washington, washington$cand_id == "P00003392")
donald_trump <- subset(washington, washington$cand_id == "P80001571")
clinton_by_city <- hillary_clinton %>%
group_by(contbr_city) %>%
dplyr :: summarise(mean_amt=mean(contb_receipt_amt),
median_amt=median(contb_receipt_amt),
min_amt = min(contb_receipt_amt),
max_amt = max(contb_receipt_amt),
n = n()) %>%
arrange(desc(mean_amt))
trump_by_city <- donald_trump %>%
group_by(contbr_city) %>%
dplyr:: summarise(mean_amt=mean(contb_receipt_amt),
median_amt=median(contb_receipt_amt),
min_amt = min(contb_receipt_amt),
max_amt = max(contb_receipt_amt),
n = n()) %>%
arrange(desc(mean_amt))
plot1 <- ggplot(aes(mean_amt), data=clinton_by_city)+
ggtitle("Hillary Clinton")+
labs(x="Average Amount", y='Frequency')+
scale_x_continuous(limits = c(0,2700))+
scale_y_continuous(limits = c(0,300))+
theme_classic()+
geom_histogram()
plot2 <- ggplot(aes(mean_amt), data=trump_by_city)+
ggtitle("Donald_Trump")+
labs(x="Average Amount", y="Frequency")+
scale_x_continuous(limits = c(0,2700))+
scale_y_continuous(limits = c(0,300))+
theme_classic()+
geom_histogram()
grid.arrange(plot1, plot2, ncol = 2, top = textGrob("Average Contributed Amount by City", gp=gpar(fontsize=20, font=2)))
clinton_trump <- subset(washington, washington$cand_id == "P00003392" | washington$cand_id == "P80001571")
ggplot(aes(x=cand_nm, y=contb_receipt_amt), data=clinton_trump)+
geom_boxplot()+
coord_cartesian(ylim = c(0,500))+
theme_classic()+
ggtitle("Boxplots show the average contributed amount of money from all cities in WA")+
labs(x="Candidate Name", y="Contributed Amount")
hillary_by_employers <- hillary_clinton %>%
filter(contbr_employer != '',
contbr_employer != 'INFORMATION REQUESTED',
contbr_employer != 'N/A',
contbr_employer != 'RETIRED',
contbr_employer != 'NOT EMPLOYED') %>%
group_by(contbr_employer) %>%
tally(contb_receipt_amt) %>%
arrange(desc(n))%>%
top_n(10)
donald_by_employers <- donald_trump %>%
filter(contbr_employer != '',
contbr_employer != 'INFORMATION REQUESTED',
contbr_employer != 'N/A',
contbr_employer != 'RETIRED',
contbr_employer != 'NOT EMPLOYED') %>%
group_by(contbr_employer) %>%
tally(contb_receipt_amt) %>%
arrange(desc(n))%>%
top_n(10)
#Plot top 10 employers by total value
plot3 <- ggplot(aes(x=contbr_employer, y=n), data=hillary_by_employers)+
geom_bar(stat='identity')+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=.4))+
labs(x="Employer", y="Total Contributed Amount")+
ggtitle("Hillary Clinton")
plot4 <- ggplot(aes(x=contbr_employer, y=n), data=donald_by_employers)+
geom_bar(stat='identity')+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=.4))+
labs(x="Employer", y="Total Contributed Amount")+
ggtitle("Donald Trump")
grid.arrange(plot3, plot4, ncol = 2, top = "Total Contributed Amount by Employer in WA")
hillary_by_employers_noself <- hillary_by_employers %>%
filter(contbr_employer != 'SELF-EMPLOYED')%>%
group_by(contbr_employer) %>%
arrange(desc(n))%>%
top_n(10)
donald_by_employers_noself <- donald_by_employers %>%
filter(contbr_employer != 'SELF-EMPLOYED') %>%
group_by(contbr_employer) %>%
arrange(desc(n))%>%
top_n(10)
#Plot top 10 employers by total value without self-employed
plot5 <- ggplot(aes(x=contbr_employer, y=n), data=hillary_by_employers_noself)+
geom_bar(stat='identity')+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=.4))+
labs(x="Employer", y="Total Contributed Amount")+
ggtitle("Hillary Clinton")
plot6 <- ggplot(aes(x=contbr_employer, y=n), data=donald_by_employers_noself)+
geom_bar(stat='identity')+
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust=.4))+
labs(x="Employer", y="Total Contributed Amount")+
ggtitle("Donald Trump")
grid.arrange(plot5, plot6, ncol = 2, top = "Total Contributed Amount by Employer in WA")
val_by_zip_hillary = hillary_clinton %>%
group_by(contbr_zip) %>%
summarise(value = sum(contb_receipt_amt)) %>%
ungroup()%>%
arrange(desc(value))
val_by_zip_hillary$region = val_by_zip_hillary$contbr_zip
val_by_zip_hillary = na.omit(val_by_zip_hillary)
washington_zip_choro = ZipChoropleth$new(val_by_zip_hillary)
View(val_by_zip_hillary)
remove(dplyr_tibble_print_original())
remove(plyr)
remove.packages(plyr)
remove.packages(plyr)
remove.packages(dplyr)
setwd("~/ives/Documents/flight_performance/")
setwd("../flight_performance/")
setwd("~/Documents/flight_performance/")
wd()
getwd()
data = read.csv("flight_performance.csv", "r")
data = read.csv("flight_performance.csv", header = TRUE)
View(data)
data = read.table("flight_performance.csv", header = TRUE)
row.names = NULL)
row.names = NULL)
header = TRUE)
sep = ',')
data = read.table("flight_performance.csv",
cc
cwvcwv
sep = ',')
data = read.table("flight_performance.csv", row.names = NULL, header = TRUE, sep = ',')
header = TRUE, sep = ',')
header = TRUE, sep = ',')
sep = ',')
data <-read.table("flight_performance.csv", row.names = NULL, header, TRUE, sep = ',')
```{r global_options, including=FALSE}
```{r global_options, include=FALSE}
```{r global_options, include=FALSE}
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
setwd("~/Documents/flight_performance/")
data <- read.table("flight_performance.csv", row.names = NULL, header, TRUE, sep = ',')
header=TRUE, sep = ',')
header = TRUE, sep = ',')
row.names = NULL)
View(data)
row.names = NULL)
data <- read.csv("flight_performance", header = TRUE)
data <- read.csv("flight_performance.csv", header = TRUE)
data <- read.table("flight_performance.csv", header = TRUE)
data <- read.csv("flight_performance.csv", header = TRUE)
data = na.omit(data)
data <- read.csv("flight_performance.csv", header = TRUE)
View(data)
data$X <- NULL
data <- read.csv("flight_performance.csv", header = TRUE, row.names = TRUE)
data <- read.csv("flight_performance.csv", header = TRUE, row.names = NULL)
View(data)
data <- read.table("flight_performance.csv", header = TRUE, check.names = TRUE)
data <- read.csv("flight_performance.csv", header = TRUE, check.names = TRUE)
View(data)
data <- read.csv("flight_performance.csv", header=T, check.names=F)
View(data)
data$`` <- NULL
data <- read.csv("flight_performance.csv", header=T, check.names=F, row.names = T)
data <- read.csv("flight_performance.csv", header=T, check.names=F, row.names = NULL)
data <- read.csv("flight_performance.csv", header=T, check.names=F, fill = T)
data <- data[1:col(data)-1]
data <- data[:,1:col(data)-1]
data <- data[ : , 1:col(data)-1]
data <- data[, 1:col(data)-1]
data <- data[, 1:(col(data)-1)]
col(data)
colnames(data)
ncol(data)
data <- data[, 1:ncol(data)-1]
#data <- data[,1:ncol(data)-1]
data <- read.csv("flight_performance.csv", header=T, check.names=F)
data <- data[,1:ncol(data)-1]
View(data)
summary(data)
carriers <- unique(data$carrier_name)
library(reshape2)
# Chunk 1: global_options
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
#Set directory
setwd("~/Documents/flight_performance/")
#Import dataset as a dataframe
flight <- read.csv("flight_performance.csv", header=T, check.names=F)
#Remove extra column with NA values
flight<- data[,1:ncol(data)-1]
# Chunk 2
#Get a summary of datatyoe and data info using summary and str
str(data)
summary(data)
# Chunk 3
#Check how many carriers in this dataset
carriers <- unique(data$carrier_name)
# Chunk 4
require(ggplot2)
require(grid)
require(scales)
require(dplyr)
require(gridExtra)
library(RColorBrewer)
library(ggthemes)
library(gender)
library(reshape2)
# Chunk 5
remove(data)
geom_histogram(aes(color = flight$year))
library(GGally)
ggpairs(data = flight)
ggpairs(data = flight, cardinality_threshold = 22)
View(flight)
flight_no_carriers <- flight$carrier = NULL
ggpairs(data = flight_no_carriers)
flight_no_carriers <- flight$carrier = NULL
ggpairs(data = flight_no_carriers)
flight_no_carriers <- flight$carrier = NULL
flight_no_carriers <- (flight$carrier = NULL)
ggpairs(data = flight_no_carriers)
remove(flight_no_carriers)
print(colnames(flight))
'weather_delay','nas_delay','security_delay'))
ggpairs(data = flight, columns = c('year', 'carrier_name', 'arr_delay', 'carrier_delay','weather_delay','nas_delay','security_delay'))
# Chunk 1: global_options
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
#Set directory
setwd("~/Documents/flight_performance/")
#Import dataset as a dataframe
flight <- read.csv("flight_performance.csv", header=T, check.names=F)
#Remove extra column with NA values
flight<- data[,1:ncol(data)-1]
# Chunk 2
#Get a summary of datatyoe and data info using summary and str
str(data)
summary(data)
# Chunk 3
#Check how many carriers in this dataset
carriers <- unique(data$carrier_name)
# Chunk 4
require(ggplot2)
require(grid)
require(scales)
require(dplyr)
require(gridExtra)
library(RColorBrewer)
library(ggthemes)
library(gender)
library(reshape2)
library(GGally)
print(colnames(flight))
ggpairs(data = flight,
columns = c('year', 'carrier_name', 'arr_delay', 'carrier_delay','weather_delay','nas_delay','security_delay'))
ggpair_flight <- flight[,columns]
print(colnames(flight))
columns = c('year', 'carrier_name', 'arr_delay', 'carrier_delay','weather_delay','nas_delay','security_delay')
ggpair_flight <- flight[,columns]
print(colnames(flight))
columns = c('year', 'carrier_name', ' arr_delay', 'carrier_delay','weather_delay','nas_delay','security_delay')
ggpair_flight <- flight[,columns]
columns = c('year', 'carrier_name', ' arr_delay', ' ' carrier_delay','weather_delay','nas_delay','security_delay')
columns = c('year', 'carrier_name', ' arr_delay', ' carrier_delay','weather_delay','nas_delay','security_delay')
print(colnames(flight))
columns = c('year', 'carrier_name', ' arr_delay', ' carrier_delay','weather_delay','nas_delay','security_delay')
ggpair_flight <- flight[,columns]
View(ggpair_flight)
ggpairs(data = ggpair_flight)
remove(ggpair_flight)
print(colnames(flight))
geom_histogram(aes(color = flight$carrier_name))
EXIT 
exit()
exit
close
exit()
EXIT()
Q()
Q()
q()
